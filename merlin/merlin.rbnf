import std.common.[DoubleQuotedStr]

_Name   := R'[a-zA-Z_\u4e00-\u9fa5\']{1}[a-zA-Z0-9_\u4e00-\u9fa5]*'
_Number := R'0[Xx][\da-fA-F]+|\d+(?:\.\d+|)(?:E\-{0,1}\d+|)'

KeyWord cast := 'pub' 'case' 'as' 'fn'
                'if' 'else' 'then' 'for'
                'nil' 'true' 'false' 'uncheck'
                'instance' 'trait' 'from' 'when' 'where'
                'goto' 'yield' 'with' 'is' 'in' 'and' 'or'

OperatorChar := '*' '^' '%' '&' '@' '$' '+' '/' '>' '<' '='  '?'

Identifier ::= _Name as name
           rewrite
                Symbol(name.lineno, name.colno, name.value)

IdList ::= (Identifier (',' Identifier)*) as seq
           rewrite tuple(seq[::2])

Str    ::= DoubleQuotedStr+ as seq
           rewrite
                head = seq[0]
                Const.str(head.lineno, head.colno, ''.join(e.value for e in seq))

Numeric::= _Number as num
           rewrite  Const.num(num.lineno, num.colno, eval(num.value))

Const  ::=
    | 'nil'   as nil
    | 'true'  as true
    | 'false' as false
    rewrite
        Const.nil(nil.lineno, nil.colno)      if nil  else\
        Const.true(true.lineno, true.colno)   if true else\
        Const.false(false.lineno, false.colno)

Statement ::=
    | Expr  [';']
    | Bind  [';']
    | Trait [';']
    | Inst  [';']
    | Type  [';']

BindItem ::=
    Pat as pat '=' Expr as exp
    rewrite
        BindItem(pat.lineno, pat.colno, pat, exp)

Bind  ::=
    | 'let' as mark BindItem+ as seq 'then' Expr as then
    rewrite
        Bind(mark.lineno, mark.colno, tuple(seq), then)

IfElse ::=
       'if' as mark
        Expr  as test
       'then' Block as if_true
      ['else' Block as if_false]
      rewrite IfExp(mark.lineno, mark.colno, test, if_true, if_false)


Function::=
    |  'fn' as mark
        [Identifier    as sym]
       '('  [TypedExprList as args] ')' ['->' Expr as ret] '='
        Block as body
    rewrite Function(mark.lineno, mark.colno, sym, args, ret, body)

Expr ::=
    | IfElse
    | PatMatch
    | BOpr


BOp ::= | ('or' | '-' | 'and') as elem
        | '`' Name as name '`'
        | (OperatorChar (OperatorChar | '.')*) as seq
        rewrite
            op = elem.value if elem else\
                 name.value if name else\
                 ''.join(each.value for each in seq)
            Operator(ASDL.Symbol(op))

BOpr ::= UOpr as head (BOp UOpr)*  as tail
         rewrite
            if tail:
                itor = TwoSideLink.from_iter((head, *tail))
                head = bin_expr_reduce(lambda op, a, b: ASDL.Call(op, a, b), itor)
            head

Uop ::= ''

UOpr ::= UOp UOpr | App

App ::= Chain ('(' [ExprList] ')')*

Chain ::= Atom ('.' Trail | '[' Slice ']')*

Atom ::=
    | Const
    | Identifier
    | LiteralDataType
    | '(' Expr ')'



# the following items is in lower priority

Trait ::=
    'trait' as p_mark Identifier ConstraintList* ['from' InheritanceList]
     [Block]

Type ::=
    'type' as p_mark Identifier
     [Block]

Instance ::=
    'instance' as p_mark Identifier ConstraintList* ['from' Block]
     [Block]



PatMatch::=
    | 'case' Expr 'of' Branch+



/*

1. Function

fn f (y: float -> int) -> int = {

}


2. Case
case expr of
    pattern1 => {

    }
    pattern2 => {

    }

    pattern3 => {

    }

* Lambda
    fn (x) = x + 1
    {x => x + 1}
    {_ + 1}
    {_1 + 1}

2. IfElse

    if exp { }
    else { }

    (if exp {result}) : option[typeof(result)]
    (if exp {r1} else {r2}) /*when ( r1 == r2 on typeof) */: typeof(r1)
    (if exp {r1} else {r2}) /*when ( r1 != r2 on typeof) */: union[r1, r2]

3. Case
case v as
    x =>
      1 + 1
    z =>
      s = 1
    y => {}
    z => {}
    _ => {}

4.

trait Printable
  fn print(this)
  fn ...
  fn ...


trait SpecificField{
    field: int
}

instance List[a, b] [from SpecificField, Printable]{
    pub
        fn take(this, n: int) -> List[a, n] when b >= n =>
            uncheck this |> _.take n

        fn len (this) -> int when b >= n =>
            uncheck this |> _ . len

        fn append(this, e: a) -> List[a, b + 1] =>
            uncheck this |> _ . append e
}

type Point {
    x : int
    y : int
}

instance Point[a, b] when abs(a) < 10, abs(b) < 20

p : Point[5, 5] = Point(1, 2)
p : Point[5, 5] = Point[5, 10](1, 2)


*/





